#include "VulnerabilityManager.h"
#include <QFile>
#include <QJsonParseError>
#include <QDebug>
#include <QCoreApplication>

VulnerabilityManager::VulnerabilityManager(QObject *parent)
    : QObject(parent)
{
}

bool VulnerabilityManager::loadDefinitions(const QString &filePath)
{
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly)) {
        qWarning() << "Não foi possível abrir o arquivo:" << filePath;
        return false;
    }
    
    QByteArray data = file.readAll();
    file.close();
    
    QJsonParseError error;
    m_definitions = QJsonDocument::fromJson(data, &error);
    
    if (error.error != QJsonParseError::NoError) {
        qWarning() << "Erro ao parsear JSON:" << error.errorString();
        return false;
    }
    
    return true;
}

QVector<VulnerabilityDefinition> VulnerabilityManager::getDefinitionsForOS(const QString &os) const
{
    QVector<VulnerabilityDefinition> definitions;
    
    if (!m_definitions.isObject()) {
        return definitions;
    }
    
    QJsonObject root = m_definitions.object();
    if (!root.contains(os) || !root[os].isArray()) {
        return definitions;
    }
    
    QJsonArray osArray = root[os].toArray();
    for (const QJsonValue &value : osArray) {
        if (!value.isObject()) continue;
        
        QJsonObject obj = value.toObject();
        VulnerabilityDefinition def;
        
        def.id = obj["id"].toString();
        def.name = obj["name"].toString();
        def.description = obj["description"].toString();
        def.impact = obj["impact"].toString();
        def.severity = stringToSeverity(obj["severity"].toString());
        def.fix = obj["fix"].toString();
        
        definitions.append(def);
    }
    
    return definitions;
}

QStringList VulnerabilityManager::getSupportedOS() const
{
    QStringList osList;
    
    if (!m_definitions.isObject()) {
        return osList;
    }
    
    QJsonObject root = m_definitions.object();
    for (auto it = root.begin(); it != root.end(); ++it) {
        osList.append(it.key());
    }
    
    return osList;
}

QString VulnerabilityManager::getCurrentOS() const
{
    qDebug() << "Detectando sistema operacional...";
    
#ifdef Q_OS_WIN
    qDebug() << "Detectado: Windows";
    return "windows";
#elif defined(Q_OS_LINUX)
    qDebug() << "Detectado: Linux";
    return "linux";
#elif defined(Q_OS_MAC)
    qDebug() << "Detectado: macOS";
    return "macos";
#elif defined(Q_OS_UNIX)
    qDebug() << "Detectado: Sistema Unix-like (assumindo Linux)";
    return "linux";
#else
    qDebug() << "Sistema operacional não suportado";
    return "unknown";
#endif
}

Severity VulnerabilityManager::stringToSeverity(const QString &severityStr) const
{
    if (severityStr == "Alta") return Severity::Alta;
    if (severityStr == "Média") return Severity::Media;
    if (severityStr == "Baixa") return Severity::Baixa;
    return Severity::Media;
}

QString VulnerabilityManager::severityToString(Severity severity) const
{
    switch (severity) {
        case Severity::Alta: return "Alta";
        case Severity::Media: return "Média";
        case Severity::Baixa: return "Baixa";
        default: return "Média";
    }
}
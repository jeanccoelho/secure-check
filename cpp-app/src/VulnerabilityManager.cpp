#include "VulnerabilityManager.h"
#include <QFile>
#include <QJsonParseError>
#include <QDebug>
#include <QCoreApplication>
#include <QSysInfo>
#include <QProcess>
#include <QStandardPaths>

VulnerabilityManager::VulnerabilityManager(QObject *parent)
    : QObject(parent)
{
}

bool VulnerabilityManager::loadDefinitions(const QString &filePath)
{
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly)) {
        qWarning() << "Não foi possível abrir o arquivo:" << filePath;
        return false;
    }
    
    QByteArray data = file.readAll();
    file.close();
    
    QJsonParseError error;
    m_definitions = QJsonDocument::fromJson(data, &error);
    
    if (error.error != QJsonParseError::NoError) {
        qWarning() << "Erro ao parsear JSON:" << error.errorString();
        return false;
    }
    
    return true;
}

QVector<VulnerabilityDefinition> VulnerabilityManager::getDefinitionsForOS(const QString &os) const
{
    QVector<VulnerabilityDefinition> definitions;
    
    if (!m_definitions.isObject()) {
        return definitions;
    }
    
    QJsonObject root = m_definitions.object();
    if (!root.contains(os) || !root[os].isArray()) {
        return definitions;
    }
    
    QJsonArray osArray = root[os].toArray();
    for (const QJsonValue &value : osArray) {
        if (!value.isObject()) continue;
        
        QJsonObject obj = value.toObject();
        VulnerabilityDefinition def;
        
        def.id = obj["id"].toString();
        def.name = obj["name"].toString();
        def.description = obj["description"].toString();
        def.impact = obj["impact"].toString();
        def.severity = stringToSeverity(obj["severity"].toString());
        def.fix = obj["fix"].toString();
        
        definitions.append(def);
    }
    
    return definitions;
}

QStringList VulnerabilityManager::getSupportedOS() const
{
    QStringList osList;
    
    if (!m_definitions.isObject()) {
        return osList;
    }
    
    QJsonObject root = m_definitions.object();
    for (auto it = root.begin(); it != root.end(); ++it) {
        osList.append(it.key());
    }
    
    return osList;
}

QString VulnerabilityManager::getCurrentOS() const
{
    qDebug() << "=== DETECÇÃO DETALHADA DO SISTEMA OPERACIONAL ===";
    
    // Informações básicas do Qt
    qDebug() << "Qt SysInfo:";
    qDebug() << "  - Kernel Type:" << QSysInfo::kernelType();
    qDebug() << "  - Kernel Version:" << QSysInfo::kernelVersion();
    qDebug() << "  - Product Type:" << QSysInfo::productType();
    qDebug() << "  - Product Version:" << QSysInfo::productVersion();
    qDebug() << "  - Pretty Product Name:" << QSysInfo::prettyProductName();
    qDebug() << "  - Machine Host Name:" << QSysInfo::machineHostName();
    qDebug() << "  - CPU Architecture:" << QSysInfo::currentCpuArchitecture();
    
    // Macros de compilação
    qDebug() << "\nMacros de Compilação Qt:";
#ifdef Q_OS_WIN
    qDebug() << "  - Q_OS_WIN: DEFINIDA";
#else
    qDebug() << "  - Q_OS_WIN: NÃO DEFINIDA";
#endif

#ifdef Q_OS_LINUX
    qDebug() << "  - Q_OS_LINUX: DEFINIDA";
#else
    qDebug() << "  - Q_OS_LINUX: NÃO DEFINIDA";
#endif

#ifdef Q_OS_UNIX
    qDebug() << "  - Q_OS_UNIX: DEFINIDA";
#else
    qDebug() << "  - Q_OS_UNIX: NÃO DEFINIDA";
#endif

#ifdef Q_OS_MAC
    qDebug() << "  - Q_OS_MAC: DEFINIDA";
#else
    qDebug() << "  - Q_OS_MAC: NÃO DEFINIDA";
#endif

#ifdef Q_OS_MACOS
    qDebug() << "  - Q_OS_MACOS: DEFINIDA";
#else
    qDebug() << "  - Q_OS_MACOS: NÃO DEFINIDA";
#endif

    // Macros padrão do compilador
    qDebug() << "\nMacros Padrão do Compilador:";
#ifdef _WIN32
    qDebug() << "  - _WIN32: DEFINIDA";
#else
    qDebug() << "  - _WIN32: NÃO DEFINIDA";
#endif

#ifdef __linux__
    qDebug() << "  - __linux__: DEFINIDA";
#else
    qDebug() << "  - __linux__: NÃO DEFINIDA";
#endif

#ifdef __APPLE__
    qDebug() << "  - __APPLE__: DEFINIDA";
#else
    qDebug() << "  - __APPLE__: NÃO DEFINIDA";
#endif

#ifdef __unix__
    qDebug() << "  - __unix__: DEFINIDA";
#else
    qDebug() << "  - __unix__: NÃO DEFINIDA";
#endif

    // Detecção por comando do sistema
    qDebug() << "\nDetecção por Comandos do Sistema:";
    
    QProcess process;
    process.setProcessChannelMode(QProcess::MergedChannels);
    
    // Tentar comando 'uname'
    process.start("uname", QStringList() << "-a");
    if (process.waitForFinished(3000)) {
        QString unameOutput = process.readAllStandardOutput().trimmed();
        qDebug() << "  - uname -a:" << unameOutput;
    } else {
        qDebug() << "  - uname: comando não disponível";
    }
    
    // Tentar ler /etc/os-release (Linux)
    QFile osRelease("/etc/os-release");
    if (osRelease.open(QIODevice::ReadOnly)) {
        QString content = osRelease.readAll();
        qDebug() << "  - /etc/os-release encontrado:";
        QStringList lines = content.split('\n');
        for (const QString &line : lines) {
            if (line.startsWith("NAME=") || line.startsWith("VERSION=") || 
                line.startsWith("ID=") || line.startsWith("PRETTY_NAME=")) {
                qDebug() << "    " << line;
            }
        }
    } else {
        qDebug() << "  - /etc/os-release: não encontrado";
    }
    
    // Tentar comando 'lsb_release' (Linux)
    process.start("lsb_release", QStringList() << "-a");
    if (process.waitForFinished(3000)) {
        QString lsbOutput = process.readAllStandardOutput().trimmed();
        if (!lsbOutput.isEmpty()) {
            qDebug() << "  - lsb_release -a:" << lsbOutput;
        }
    } else {
        qDebug() << "  - lsb_release: comando não disponível";
    }
    
    // Verificar arquivos específicos do Windows
    if (QFile::exists("C:\\Windows\\System32")) {
        qDebug() << "  - C:\\Windows\\System32: EXISTE (Windows detectado)";
    } else {
        qDebug() << "  - C:\\Windows\\System32: NÃO EXISTE";
    }
    
    qDebug() << "\n=== RESULTADO DA DETECÇÃO ===";
    
    // Lógica de detecção baseada em múltiplas fontes
    QString kernelType = QSysInfo::kernelType().toLower();
    QString productType = QSysInfo::productType().toLower();
    
    qDebug() << "Kernel Type (lowercase):" << kernelType;
    qDebug() << "Product Type (lowercase):" << productType;
    
    // Detecção por kernel type (mais confiável)
    if (kernelType == "winnt" || productType.contains("windows")) {
        qDebug() << "DETECTADO: Windows (via kernelType/productType)";
        return "windows";
    }
    
    if (kernelType == "linux" || productType.contains("linux") || productType == "kali" || productType == "ubuntu" || productType == "debian" || productType == "fedora" || productType == "centos" || productType == "arch") {
        qDebug() << "DETECTADO: Linux (via kernelType/productType)";
        return "linux";
    }
    
    if (kernelType == "darwin" || productType.contains("macos") || productType.contains("osx")) {
        qDebug() << "DETECTADO: macOS (via kernelType/productType)";
        return "macos";
    }
    
    // Fallback para macros Qt
#ifdef Q_OS_WIN
    qDebug() << "DETECTADO: Windows (via macro Q_OS_WIN)";
    return "windows";
#elif defined(Q_OS_LINUX)
    qDebug() << "DETECTADO: Linux (via macro Q_OS_LINUX)";
    return "linux";
#elif defined(Q_OS_MAC) || defined(Q_OS_MACOS)
    qDebug() << "DETECTADO: macOS (via macro Q_OS_MAC/Q_OS_MACOS)";
    return "macos";
#elif defined(Q_OS_UNIX)
    // Se é Unix mas não Linux nem macOS, assumir Linux como mais provável
    qDebug() << "DETECTADO: Sistema Unix-like, assumindo Linux (via macro Q_OS_UNIX)";
    return "linux";
#endif
    
    // Fallback para macros padrão
#ifdef _WIN32
    qDebug() << "DETECTADO: Windows (via macro _WIN32)";
    return "windows";
#elif defined(__linux__)
    qDebug() << "DETECTADO: Linux (via macro __linux__)";
    return "linux";
#elif defined(__APPLE__)
    qDebug() << "DETECTADO: macOS (via macro __APPLE__)";
    return "macos";
#elif defined(__unix__)
    qDebug() << "DETECTADO: Sistema Unix-like, assumindo Linux (via macro __unix__)";
    return "linux";
#endif
    
    qDebug() << "ERRO: Sistema operacional não pôde ser detectado!";
    qDebug() << "Sistemas suportados: Windows, Linux, macOS";
    return "unknown";
}

Severity VulnerabilityManager::stringToSeverity(const QString &severityStr) const
{
    if (severityStr == "Alta") return Severity::Alta;
    if (severityStr == "Média") return Severity::Media;
    if (severityStr == "Baixa") return Severity::Baixa;
    return Severity::Media;
}

QString VulnerabilityManager::severityToString(Severity severity) const
{
    switch (severity) {
        case Severity::Alta: return "Alta";
        case Severity::Media: return "Média";
        case Severity::Baixa: return "Baixa";
        default: return "Média";
    }
}
#!/bin/bash

# Script de build para Linux/macOS
# Uso: ./build.sh [clean|release|debug]

set -e

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_TYPE="${1:-Release}"

echo "üõ°Ô∏è  SecurityChecker Build Script"
echo "=================================="
echo "Diret√≥rio do projeto: $PROJECT_DIR"
echo "Tipo de build: $BUILD_TYPE"
echo ""

# Detectar sistema operacional
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
    echo "üêß Sistema detectado: Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    echo "üçé Sistema detectado: macOS"
else
    echo "‚ùå Sistema operacional n√£o suportado: $OSTYPE"
    exit 1
fi

# Verificar depend√™ncias
echo ""
echo "üîç Verificando depend√™ncias..."

if ! command -v cmake &> /dev/null; then
    echo "‚ùå CMake n√£o encontrado. Instale o CMake primeiro."
    exit 1
fi

if ! command -v qmake6 &> /dev/null && ! command -v qmake &> /dev/null; then
    echo "‚ùå Qt6 n√£o encontrado."
    if [[ "$OS" == "linux" ]]; then
        echo "   Instale com: sudo apt install qt6-base-dev qt6-tools-dev"
    elif [[ "$OS" == "macos" ]]; then
        echo "   Instale com: brew install qt6"
    fi
    exit 1
fi

echo "‚úÖ Depend√™ncias verificadas"

# Limpar build anterior se solicitado
if [[ "$1" == "clean" ]]; then
    echo ""
    echo "üßπ Limpando builds anteriores..."
    rm -rf "$PROJECT_DIR/build-$OS"
    echo "‚úÖ Build limpo"
    exit 0
fi

# Criar diret√≥rio de build
BUILD_DIR="$PROJECT_DIR/build-$OS"
echo ""
echo "üìÅ Criando diret√≥rio de build: $BUILD_DIR"
mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

# Configurar CMake
echo ""
echo "‚öôÔ∏è  Configurando projeto com CMake..."

if [[ "$OS" == "macos" ]]; then
    # Para macOS, especificar caminho do Qt6
    QT6_PATH=$(brew --prefix qt6)
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_PREFIX_PATH="$QT6_PATH" "$PROJECT_DIR"
else
    # Para Linux
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" "$PROJECT_DIR"
fi

# Compilar
echo ""
echo "üî® Compilando projeto..."
if [[ "$OS" == "macos" ]]; then
    make -j$(sysctl -n hw.ncpu)
else
    make -j$(nproc)
fi

echo ""
echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
echo ""
echo "üì¶ Execut√°vel gerado:"
if [[ -f "$BUILD_DIR/SecurityChecker" ]]; then
    echo "   $BUILD_DIR/SecurityChecker"
    
    # Mostrar informa√ß√µes do execut√°vel
    echo ""
    echo "‚ÑπÔ∏è  Informa√ß√µes do execut√°vel:"
    ls -lh "$BUILD_DIR/SecurityChecker"
    file "$BUILD_DIR/SecurityChecker"
else
    echo "‚ùå Execut√°vel n√£o encontrado!"
    exit 1
fi

echo ""
echo "üöÄ Para executar:"
echo "   cd $BUILD_DIR"
echo "   sudo ./SecurityChecker"
echo ""
echo "‚ö†Ô∏è  Lembre-se: Execute como administrador/root para funcionalidade completa!"